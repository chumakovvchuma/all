{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/victorchumakov/Documents/blogg/all/client/components/Errors.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { List, Para } from 'device-agnostic-ui';\nimport { ErrorMessage } from './ErrorMessage';\nexport var Errors = function Errors(_ref) {\n  var fetchError = _ref.fetchError,\n      httpError = _ref.httpError,\n      parseError = _ref.parseError,\n      graphQLErrors = _ref.graphQLErrors;\n  return __jsx(React.Fragment, null, fetchError && __jsx(ErrorMessage, {\n    heading: \"Fetch error\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }\n  }, __jsx(Para, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, fetchError)), httpError && __jsx(ErrorMessage, {\n    heading: \"HTTP error: \".concat(httpError.status),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, httpError.statusText && __jsx(Para, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 34\n    }\n  }, httpError.statusText)), parseError && __jsx(ErrorMessage, {\n    heading: \"Parse error\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }, __jsx(Para, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, parseError)), graphQLErrors && __jsx(ErrorMessage, {\n    heading: \"GraphQL errors\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, __jsx(List, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, graphQLErrors.map(function (_ref2, index) {\n    var message = _ref2.message;\n    return __jsx(\"li\", {\n      // eslint-disable-next-line react/no-array-index-key\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, message);\n  }))));\n};\n_c = Errors;\n\nvar _c;\n\n$RefreshReg$(_c, \"Errors\");","map":{"version":3,"sources":["/Users/victorchumakov/Documents/blogg/all/client/components/Errors.js"],"names":["List","Para","ErrorMessage","Errors","fetchError","httpError","parseError","graphQLErrors","status","statusText","map","index","message"],"mappings":";;;;;AAAA,SAASA,IAAT,EAAeC,IAAf,QAA2B,oBAA3B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,MACpBC,UADoB,QACpBA,UADoB;AAAA,MAEpBC,SAFoB,QAEpBA,SAFoB;AAAA,MAGpBC,UAHoB,QAGpBA,UAHoB;AAAA,MAIpBC,aAJoB,QAIpBA,aAJoB;AAAA,SAMpB,4BACGH,UAAU,IACT,MAAC,YAAD;AAAc,IAAA,OAAO,EAAC,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,UAAP,CADF,CAFJ,EAMGC,SAAS,IACR,MAAC,YAAD;AAAc,IAAA,OAAO,wBAAiBA,SAAS,CAACG,MAA3B,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,SAAS,CAACI,UAAV,IAAwB,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOJ,SAAS,CAACI,UAAjB,CAD3B,CAPJ,EAWGH,UAAU,IACT,MAAC,YAAD;AAAc,IAAA,OAAO,EAAC,aAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOA,UAAP,CADF,CAZJ,EAgBGC,aAAa,IACZ,MAAC,YAAD;AAAc,IAAA,OAAO,EAAC,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,aAAa,CAACG,GAAd,CAAkB,iBAAcC,KAAd;AAAA,QAAGC,OAAH,SAAGA,OAAH;AAAA,WACjB;AACE;AACA,MAAA,GAAG,EAAED,KAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIGC,OAJH,CADiB;AAAA,GAAlB,CADH,CADF,CAjBJ,CANoB;AAAA,CAAf;KAAMT,M","sourcesContent":["import { List, Para } from 'device-agnostic-ui';\nimport { ErrorMessage } from './ErrorMessage';\n\nexport const Errors = ({\n  fetchError,\n  httpError,\n  parseError,\n  graphQLErrors,\n}) => (\n  <>\n    {fetchError && (\n      <ErrorMessage heading=\"Fetch error\">\n        <Para>{fetchError}</Para>\n      </ErrorMessage>\n    )}\n    {httpError && (\n      <ErrorMessage heading={`HTTP error: ${httpError.status}`}>\n        {httpError.statusText && <Para>{httpError.statusText}</Para>}\n      </ErrorMessage>\n    )}\n    {parseError && (\n      <ErrorMessage heading=\"Parse error\">\n        <Para>{parseError}</Para>\n      </ErrorMessage>\n    )}\n    {graphQLErrors && (\n      <ErrorMessage heading=\"GraphQL errors\">\n        <List>\n          {graphQLErrors.map(({ message }, index) => (\n            <li\n              // eslint-disable-next-line react/no-array-index-key\n              key={index}\n            >\n              {message}\n            </li>\n          ))}\n        </List>\n      </ErrorMessage>\n    )}\n  </>\n);\n"]},"metadata":{},"sourceType":"module"}