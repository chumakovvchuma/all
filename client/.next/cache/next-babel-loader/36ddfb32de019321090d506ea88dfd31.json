{"ast":null,"code":"var _jsxFileName = \"/Users/victorchumakov/Documents/blogg/all/client/components/Country.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Loading, Table } from 'device-agnostic-ui';\nimport { useGraphQL } from 'graphql-react';\nimport React from 'react';\nimport { countriesFetchOptionsOverride } from '../config';\nimport { Errors } from './Errors';\nconst query =\n/* GraphQL */\n`\n  query($countryCode: ID!) {\n    country(code: $countryCode) {\n      name\n      emoji\n      capital\n    }\n  }\n`;\nexport const Country = ({\n  countryCode\n}) => {\n  const operation = React.useMemo(() => ({\n    query,\n    variables: {\n      countryCode\n    }\n  }), [countryCode]);\n\n  const _useGraphQL = useGraphQL({\n    operation,\n    fetchOptionsOverride: countriesFetchOptionsOverride,\n    loadOnMount: true,\n    loadOnReload: true,\n    loadOnReset: true\n  }),\n        {\n    loading,\n    cacheValue: {\n      data\n    } = {}\n  } = _useGraphQL,\n        errors = _objectWithoutProperties(_useGraphQL.cacheValue, [\"data\"]);\n\n  return __jsx(React.Fragment, null, data && __jsx(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, __jsx(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, __jsx(\"th\", {\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }\n  }, \"Country\"), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }\n  }, data.country.name)), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, __jsx(\"th\", {\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  }, \"Emoji\"), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, data.country.emoji)), __jsx(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, __jsx(\"th\", {\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }, \"Capital\"), __jsx(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  }, data.country.capital)))), __jsx(Errors, _extends({}, errors, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  })), loading && __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/victorchumakov/Documents/blogg/all/client/components/Country.js"],"names":["Loading","Table","useGraphQL","React","countriesFetchOptionsOverride","Errors","query","Country","countryCode","operation","useMemo","variables","fetchOptionsOverride","loadOnMount","loadOnReload","loadOnReset","loading","cacheValue","data","errors","country","name","emoji","capital"],"mappings":";;;;;;;;;AAAA,SAASA,OAAT,EAAkBC,KAAlB,QAA+B,oBAA/B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,6BAAT,QAA8C,WAA9C;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,MAAMC,KAAK;AAAG;AAAe;;;;;;;;CAA7B;AAUA,OAAO,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAqB;AAC1C,QAAMC,SAAS,GAAGN,KAAK,CAACO,OAAN,CAChB,OAAO;AACLJ,IAAAA,KADK;AAELK,IAAAA,SAAS,EAAE;AACTH,MAAAA;AADS;AAFN,GAAP,CADgB,EAOhB,CAACA,WAAD,CAPgB,CAAlB;;AAUA,sBAA0DN,UAAU,CAAC;AACnEO,IAAAA,SADmE;AAEnEG,IAAAA,oBAAoB,EAAER,6BAF6C;AAGnES,IAAAA,WAAW,EAAE,IAHsD;AAInEC,IAAAA,YAAY,EAAE,IAJqD;AAKnEC,IAAAA,WAAW,EAAE;AALsD,GAAD,CAApE;AAAA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,UAAU,EAAE;AAAEC,MAAAA;AAAF,QAAsB;AAA7C,GAAN;AAAA,QAAwCC,MAAxC,wCAAiBF,UAAjB;;AAQA,SACE,4BACGC,IAAI,IACH,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,IAAI,CAACE,OAAL,CAAaC,IAAlB,CAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,IAAI,CAACE,OAAL,CAAaE,KAAlB,CAFF,CALF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,IAAI,CAACE,OAAL,CAAaG,OAAlB,CAFF,CATF,CADF,CAFJ,EAmBE,MAAC,MAAD,eAAYJ,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnBF,EAoBGH,OAAO,IAAI,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBd,CADF;AAwBD,CA3CM","sourcesContent":["import { Loading, Table } from 'device-agnostic-ui';\nimport { useGraphQL } from 'graphql-react';\nimport React from 'react';\nimport { countriesFetchOptionsOverride } from '../config';\nimport { Errors } from './Errors';\n\nconst query = /* GraphQL */ `\n  query($countryCode: ID!) {\n    country(code: $countryCode) {\n      name\n      emoji\n      capital\n    }\n  }\n`;\n\nexport const Country = ({ countryCode }) => {\n  const operation = React.useMemo(\n    () => ({\n      query,\n      variables: {\n        countryCode,\n      },\n    }),\n    [countryCode]\n  );\n\n  const { loading, cacheValue: { data, ...errors } = {} } = useGraphQL({\n    operation,\n    fetchOptionsOverride: countriesFetchOptionsOverride,\n    loadOnMount: true,\n    loadOnReload: true,\n    loadOnReset: true,\n  });\n\n  return (\n    <>\n      {data && (\n        <Table>\n          <tbody>\n            <tr>\n              <th scope=\"row\">Country</th>\n              <td>{data.country.name}</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Emoji</th>\n              <td>{data.country.emoji}</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Capital</th>\n              <td>{data.country.capital}</td>\n            </tr>\n          </tbody>\n        </Table>\n      )}\n      <Errors {...errors} />\n      {loading && <Loading />}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}