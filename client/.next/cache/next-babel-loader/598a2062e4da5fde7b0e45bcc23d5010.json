{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/victorchumakov/Documents/blogg/all/client/components/Country.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Loading, Table } from 'device-agnostic-ui';\nimport { useGraphQL } from 'graphql-react';\nimport React from 'react';\nimport { countriesFetchOptionsOverride } from '../config';\nimport { Errors } from './Errors';\nvar query =\n/* GraphQL */\n\"\\n  query($countryCode: ID!) {\\n    country(code: $countryCode) {\\n      name\\n      emoji\\n      capital\\n    }\\n  }\\n\";\nexport var Country = function Country(_ref) {\n  _s();\n\n  var countryCode = _ref.countryCode;\n  var operation = React.useMemo(function () {\n    return {\n      query: query,\n      variables: {\n        countryCode: countryCode\n      }\n    };\n  }, [countryCode]);\n\n  var _useGraphQL = useGraphQL({\n    operation: operation,\n    fetchOptionsOverride: countriesFetchOptionsOverride,\n    loadOnMount: true,\n    loadOnReload: true,\n    loadOnReset: true\n  }),\n      loading = _useGraphQL.loading,\n      _useGraphQL$cacheValu = _useGraphQL.cacheValue;\n\n  _useGraphQL$cacheValu = _useGraphQL$cacheValu === void 0 ? {} : _useGraphQL$cacheValu;\n\n  var data = _useGraphQL$cacheValu.data,\n      errors = _objectWithoutProperties(_useGraphQL$cacheValu, [\"data\"]);\n\n  return __jsx(React.Fragment, null, data && __jsx(Table, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, __jsx(\"tbody\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, __jsx(\"tr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, __jsx(\"th\", {\n    scope: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 15\n    }\n  }, \"Country\"), __jsx(\"td\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 15\n    }\n  }, data.country.name)), __jsx(\"tr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, __jsx(\"th\", {\n    scope: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  }, \"Emoji\"), __jsx(\"td\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }, data.country.emoji)), __jsx(\"tr\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, __jsx(\"th\", {\n    scope: \"row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }, \"Capital\"), __jsx(\"td\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  }, data.country.capital)))), __jsx(Errors, _extends({}, errors, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  })), loading && __jsx(Loading, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 19\n    }\n  }));\n};\n\n_s(Country, \"03OQcSZxifLzWszwI+cW5J7/dwk=\", false, function () {\n  return [useGraphQL];\n});\n\n_c = Country;\n\nvar _c;\n\n$RefreshReg$(_c, \"Country\");","map":{"version":3,"sources":["/Users/victorchumakov/Documents/blogg/all/client/components/Country.js"],"names":["Loading","Table","useGraphQL","React","countriesFetchOptionsOverride","Errors","query","Country","countryCode","operation","useMemo","variables","fetchOptionsOverride","loadOnMount","loadOnReload","loadOnReset","loading","cacheValue","data","errors","country","name","emoji","capital"],"mappings":";;;;;;;;AAAA,SAASA,OAAT,EAAkBC,KAAlB,QAA+B,oBAA/B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,6BAAT,QAA8C,WAA9C;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,IAAMC,KAAK;AAAG;AAAH,yHAAX;AAUA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAqB;AAAA;;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;AAC1C,MAAMC,SAAS,GAAGN,KAAK,CAACO,OAAN,CAChB;AAAA,WAAO;AACLJ,MAAAA,KAAK,EAALA,KADK;AAELK,MAAAA,SAAS,EAAE;AACTH,QAAAA,WAAW,EAAXA;AADS;AAFN,KAAP;AAAA,GADgB,EAOhB,CAACA,WAAD,CAPgB,CAAlB;;AAD0C,oBAWgBN,UAAU,CAAC;AACnEO,IAAAA,SAAS,EAATA,SADmE;AAEnEG,IAAAA,oBAAoB,EAAER,6BAF6C;AAGnES,IAAAA,WAAW,EAAE,IAHsD;AAInEC,IAAAA,YAAY,EAAE,IAJqD;AAKnEC,IAAAA,WAAW,EAAE;AALsD,GAAD,CAX1B;AAAA,MAWlCC,OAXkC,eAWlCA,OAXkC;AAAA,0CAWzBC,UAXyB;;AAAA,6DAWS,EAXT;;AAAA,MAWXC,IAXW,yBAWXA,IAXW;AAAA,MAWFC,MAXE;;AAmB1C,SACE,4BACGD,IAAI,IACH,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,IAAI,CAACE,OAAL,CAAaC,IAAlB,CAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKH,IAAI,CAACE,OAAL,CAAaE,KAAlB,CAFF,CALF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAI,IAAA,KAAK,EAAC,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,IAAI,CAACE,OAAL,CAAaG,OAAlB,CAFF,CATF,CADF,CAFJ,EAmBE,MAAC,MAAD,eAAYJ,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAnBF,EAoBGH,OAAO,IAAI,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBd,CADF;AAwBD,CA3CM;;GAAMT,O;UAW+CL,U;;;KAX/CK,O","sourcesContent":["import { Loading, Table } from 'device-agnostic-ui';\nimport { useGraphQL } from 'graphql-react';\nimport React from 'react';\nimport { countriesFetchOptionsOverride } from '../config';\nimport { Errors } from './Errors';\n\nconst query = /* GraphQL */ `\n  query($countryCode: ID!) {\n    country(code: $countryCode) {\n      name\n      emoji\n      capital\n    }\n  }\n`;\n\nexport const Country = ({ countryCode }) => {\n  const operation = React.useMemo(\n    () => ({\n      query,\n      variables: {\n        countryCode,\n      },\n    }),\n    [countryCode]\n  );\n\n  const { loading, cacheValue: { data, ...errors } = {} } = useGraphQL({\n    operation,\n    fetchOptionsOverride: countriesFetchOptionsOverride,\n    loadOnMount: true,\n    loadOnReload: true,\n    loadOnReset: true,\n  });\n\n  return (\n    <>\n      {data && (\n        <Table>\n          <tbody>\n            <tr>\n              <th scope=\"row\">Country</th>\n              <td>{data.country.name}</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Emoji</th>\n              <td>{data.country.emoji}</td>\n            </tr>\n            <tr>\n              <th scope=\"row\">Capital</th>\n              <td>{data.country.capital}</td>\n            </tr>\n          </tbody>\n        </Table>\n      )}\n      <Errors {...errors} />\n      {loading && <Loading />}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}