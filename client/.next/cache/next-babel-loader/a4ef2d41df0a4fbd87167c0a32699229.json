{"ast":null,"code":"var _jsxFileName = \"/Users/victorchumakov/Documents/blogg/all/client/components/ExampleGraphQLError.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Loading } from 'device-agnostic-ui';\nimport { useGraphQL } from 'graphql-react';\nimport React from 'react';\nimport { countriesFetchOptionsOverride } from '../config';\nimport { Errors } from './Errors';\nconst query =\n/* GraphQL */\n`\n  {\n    asdf\n  }\n`;\nconst operation = {\n  query\n};\nexport const ExampleGraphQLError = () => {\n  const _useGraphQL = useGraphQL({\n    operation,\n    fetchOptionsOverride: countriesFetchOptionsOverride,\n    loadOnMount: true,\n    loadOnReload: true,\n    loadOnReset: true\n  }),\n        {\n    loading,\n    cacheValue: {\n      data\n    } = {}\n  } = _useGraphQL,\n        errors = _objectWithoutProperties(_useGraphQL.cacheValue, [\"data\"]);\n\n  return __jsx(\"article\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, data && data.asdf, __jsx(Errors, _extends({}, errors, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }\n  })), loading && __jsx(Loading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 19\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/victorchumakov/Documents/blogg/all/client/components/ExampleGraphQLError.js"],"names":["Loading","useGraphQL","React","countriesFetchOptionsOverride","Errors","query","operation","ExampleGraphQLError","fetchOptionsOverride","loadOnMount","loadOnReload","loadOnReset","loading","cacheValue","data","errors","asdf"],"mappings":";;;;;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,6BAAT,QAA8C,WAA9C;AACA,SAASC,MAAT,QAAuB,UAAvB;AAEA,MAAMC,KAAK;AAAG;AAAe;;;;CAA7B;AAMA,MAAMC,SAAS,GAAG;AAChBD,EAAAA;AADgB,CAAlB;AAIA,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACvC,sBAA0DN,UAAU,CAAC;AACnEK,IAAAA,SADmE;AAEnEE,IAAAA,oBAAoB,EAAEL,6BAF6C;AAGnEM,IAAAA,WAAW,EAAE,IAHsD;AAInEC,IAAAA,YAAY,EAAE,IAJqD;AAKnEC,IAAAA,WAAW,EAAE;AALsD,GAAD,CAApE;AAAA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,UAAU,EAAE;AAAEC,MAAAA;AAAF,QAAsB;AAA7C,GAAN;AAAA,QAAwCC,MAAxC,wCAAiBF,UAAjB;;AAQA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,IAAI,IAAIA,IAAI,CAACE,IADhB,EAEE,MAAC,MAAD,eAAYD,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAGGH,OAAO,IAAI,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHd,CADF;AAOD,CAhBM","sourcesContent":["import { Loading } from 'device-agnostic-ui';\nimport { useGraphQL } from 'graphql-react';\nimport React from 'react';\nimport { countriesFetchOptionsOverride } from '../config';\nimport { Errors } from './Errors';\n\nconst query = /* GraphQL */ `\n  {\n    asdf\n  }\n`;\n\nconst operation = {\n  query,\n};\n\nexport const ExampleGraphQLError = () => {\n  const { loading, cacheValue: { data, ...errors } = {} } = useGraphQL({\n    operation,\n    fetchOptionsOverride: countriesFetchOptionsOverride,\n    loadOnMount: true,\n    loadOnReload: true,\n    loadOnReset: true,\n  });\n\n  return (\n    <article>\n      {data && data.asdf}\n      <Errors {...errors} />\n      {loading && <Loading />}\n    </article>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}